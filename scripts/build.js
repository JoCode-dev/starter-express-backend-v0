import { execSync } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = new URL('.', import.meta.url).pathname;

console.log('üî® D√©but du processus de build...');

try {
  // √âtape 0: Pr√©paration
  console.log('üßπ Pr√©paration...');
  execSync('node scripts/prebuild.js', { stdio: 'inherit' });
  
  // √âtape 1: Compilation TypeScript
  console.log('üìù Compilation TypeScript...');
  execSync('tsc', { stdio: 'inherit' });
  
  // V√©rifier que le dossier dist existe
  const distPath = join(__dirname, '..', 'dist');
  if (!existsSync(distPath)) {
    throw new Error('Le dossier dist n\'a pas √©t√© cr√©√© par TypeScript');
  }
  
  // V√©rifier que server.js existe
  const serverPath = join(distPath, 'server.js');
  if (!existsSync(serverPath)) {
    throw new Error('Le fichier dist/server.js n\'a pas √©t√© cr√©√©');
  }
  
  // √âtape 2: Ajouter les extensions
  console.log('üîß Ajout des extensions .js aux imports...');
  execSync('node scripts/add-extensions.js', { stdio: 'inherit' });
  
  // V√©rifier le contenu final de server.js
  const serverContent = readFileSync(serverPath, 'utf8');
  if (!serverContent.includes('import app from')) {
    throw new Error('Le fichier server.js ne contient pas les imports attendus');
  }
  
  console.log('‚úÖ Build termin√© avec succ√®s !');
  console.log('üìÅ Fichiers g√©n√©r√©s dans:', distPath);
  
} catch (error) {
  console.error('‚ùå Erreur lors du build:', error.message);
  process.exit(1);
}